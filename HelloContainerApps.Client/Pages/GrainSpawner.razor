@page "/grain-spawner"
@using Orleans
@using HelloContainerApps.Shared
@using System.Globalization
@inject IClusterClient clusterClient

<PageTitle>Hello Azure Container Apps!</PageTitle>

<h1>Hello Azure Container Apps!</h1>
<div class="mt-4" style="width: 400px;">
    <label for="count">Grain count</label>
    <input type="number" class="form-control mb-2" id="count" @bind="count">
</div>
<div>
    <button type="submit" class="btn btn-primary" @onclick="CallMultipleGrainsMultipleTimes">Spawn some grains!</button>
</div>

<h3 class="mt-4">Hello responses</h3>
<table class="table">
    <thead>
        <tr>
            <th>Received</th>
            <th>Sent</th>
            <th>Latency</th>
            <th>Message</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var msg in messages.Take(20))
        {
            <tr>
                <td>@msg.Received.ToString("HH:mm:ss.fff", CultureInfo.InvariantCulture)</td>
                <td>@msg.Sent.ToString("HH:mm:ss.fff", CultureInfo.InvariantCulture)</td>
                <td>@msg.Latency.TotalMilliseconds.ToString("N4") ms</td>
                <td>@msg.Message</td>
            </tr>
        }
    </tbody>
</table>

@code {

    private List<MessageInfo> messages = new List<MessageInfo>();

    private int count = 20;
    private string? message;

    private async Task CallMultipleGrainsMultipleTimes()
    {
        var grains = Enumerable.Range(1, count).Select(s => new { n = s, grain = clusterClient.GetGrain<IHelloWorldGrain>(Guid.NewGuid()) }).ToArray();


        var s1 = DateTime.Now;
        var tasks1 = grains.Select(s => s.grain.Hello($"Name nameson {s.n}")).ToArray();
        await Task.WhenAll(tasks1);
        var e1 = DateTime.Now;

        messages.Insert(0, new MessageInfo(s1, e1, $"Spawned and called {count} grains"));
        
        var s2 = DateTime.Now;
        var tasks2 = grains.Select(s => s.grain.Hello($"Name nameson {s.n}")).ToArray();
        await Task.WhenAll(tasks2);
        var e2 = DateTime.Now;
        
        messages.Insert(0, new MessageInfo(s2, e2, $"Called the {count} grains again"));

    }

    public class MessageInfo
    {
        public MessageInfo(DateTime sent, DateTime received, string? message)
        {
            Sent = sent;
            Received = received;
            Message = message;
        }

        public DateTime Sent { get; }
        public DateTime Received { get; }
        public TimeSpan Latency => Received - Sent;
        public string? Message { get; }
    }
}
